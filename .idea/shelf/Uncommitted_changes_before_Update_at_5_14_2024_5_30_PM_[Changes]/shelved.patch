Index: src/com/practice/projectone/teammanagement/models/contracts/Team.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models.contracts;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Team extends Nameable{\r\n\r\n    List<Person> getMembers();\r\n\r\n    List<Board> getBoards();\r\n\r\n    void addMember(Person person);\r\n\r\n    void addBoard(Board board);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/contracts/Team.java b/src/com/practice/projectone/teammanagement/models/contracts/Team.java
--- a/src/com/practice/projectone/teammanagement/models/contracts/Team.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/contracts/Team.java	(date 1715696677022)
@@ -10,5 +10,5 @@
 
     void addMember(Person person);
 
-    void addBoard(Board board);
+    void createBoard(Board boardName);
 }
Index: src/com/practice/projectone/teammanagement/models/TeamImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.models.contracts.Board;\r\nimport com.practice.projectone.teammanagement.models.contracts.Person;\r\nimport com.practice.projectone.teammanagement.models.contracts.Team;\r\nimport com.practice.projectone.teammanagement.utils.ValidationHelpers;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class TeamImpl implements Team {\r\n\r\n    public static final int TEAM_NAME_LEN_MIN = 5;\r\n    public static final int TEAM_NAME_LEN_MAX = 15;\r\n    private static final String TEAM_NAME_LEN_ERR = String.format(\r\n            \"Team name must be between %s and %s characters long!\",\r\n            TEAM_NAME_LEN_MIN,\r\n            TEAM_NAME_LEN_MAX);\r\n\r\n    private String teamName;\r\n    private final List<Person> people;\r\n    private final List<Board> boards;\r\n\r\n    public TeamImpl(String teamName) {\r\n        setTeamName(teamName);\r\n        people = new ArrayList<>();\r\n        boards = new ArrayList<>();\r\n    }\r\n\r\n    private void setTeamName(String teamName) {\r\n        ValidationHelpers.validateStringLength(teamName, TEAM_NAME_LEN_MIN, TEAM_NAME_LEN_MAX, TEAM_NAME_LEN_ERR);\r\n        this.teamName = teamName;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return teamName;\r\n    }\r\n\r\n    @Override\r\n    public List<Person> getMembers() {\r\n        return new ArrayList<>(people);\r\n    }\r\n\r\n    @Override\r\n    public List<Board> getBoards() {\r\n        return new ArrayList<>(boards);\r\n    }\r\n\r\n    @Override\r\n    public void addMember(Person person) {\r\n        people.add(person);\r\n    }\r\n\r\n    @Override\r\n    public void addBoard(Board board) {\r\n        boards.add(board);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/TeamImpl.java b/src/com/practice/projectone/teammanagement/models/TeamImpl.java
--- a/src/com/practice/projectone/teammanagement/models/TeamImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/TeamImpl.java	(date 1715696676945)
@@ -1,5 +1,6 @@
 package com.practice.projectone.teammanagement.models;
 
+import com.practice.projectone.teammanagement.exceptions.DuplicateEntityException;
 import com.practice.projectone.teammanagement.models.contracts.Board;
 import com.practice.projectone.teammanagement.models.contracts.Person;
 import com.practice.projectone.teammanagement.models.contracts.Team;
@@ -7,9 +8,11 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 
 public class TeamImpl implements Team {
 
+    public static final String BOARD_ALREADY_EXISTS = "Board already exists";
     public static final int TEAM_NAME_LEN_MIN = 5;
     public static final int TEAM_NAME_LEN_MAX = 15;
     private static final String TEAM_NAME_LEN_ERR = String.format(
@@ -53,8 +56,25 @@
     }
 
     @Override
-    public void addBoard(Board board) {
+    public void createBoard(Board board) {
+
+        if (getBoards().contains(board)) {
+            throw new DuplicateEntityException(BOARD_ALREADY_EXISTS);
+        }
+
         boards.add(board);
     }
 
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        TeamImpl team = (TeamImpl) o;
+        return teamName.equals(team.teamName);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(teamName, people, boards);
+    }
 }
Index: src/com/practice/projectone/teammanagement/models/BoardImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.models.contracts.Board;\r\nimport com.practice.projectone.teammanagement.models.contracts.EventLog;\r\nimport com.practice.projectone.teammanagement.models.contracts.Task;\r\nimport com.practice.projectone.teammanagement.utils.ValidationHelpers;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\nimport static java.lang.String.format;\r\n\r\npublic class BoardImpl implements Board {\r\n    public static final int NAME_LEN_MIN = 5;\r\n    public static final int NAME_LEN_MAX = 10;\r\n    private static final String NAME_LEN_ERR = format(\r\n            \"Board name must be between %s and %s characters long!\",\r\n            NAME_LEN_MIN,\r\n            NAME_LEN_MAX);\r\n    private String boardName;\r\n    private final List<Task> tasks;\r\n    private final List<EventLog> eventLogs;\r\n\r\n    public BoardImpl(String boardName) {\r\n        setBoardName(boardName);\r\n        tasks = new ArrayList<>();\r\n        eventLogs = new ArrayList<>();\r\n\r\n        addEventToHistory(new EventLogImpl(String.format(\"Board %s created\", boardName)));\r\n    }\r\n\r\n    private void setBoardName(String boardName) {\r\n        ValidationHelpers.validateStringLength(boardName,NAME_LEN_MIN,NAME_LEN_MAX,NAME_LEN_ERR);\r\n        this.boardName = boardName;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return boardName;\r\n    }\r\n\r\n    @Override\r\n    public List<Task> getTasks() {\r\n        return new ArrayList<>(tasks);\r\n    }\r\n\r\n    @Override\r\n    public List<EventLog> getActivityHistory() {\r\n        return new ArrayList<>(eventLogs);\r\n    }\r\n\r\n    @Override\r\n    public void addTask(Task task) {\r\n        tasks.add(task);\r\n\r\n        addEventToHistory(new EventLogImpl(String.format(\"New item %s added to %s board\", task, boardName)));\r\n    }\r\n\r\n    private void addEventToHistory(EventLog eventLog) {\r\n        eventLogs.add(eventLog);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return boardName;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/BoardImpl.java b/src/com/practice/projectone/teammanagement/models/BoardImpl.java
--- a/src/com/practice/projectone/teammanagement/models/BoardImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/BoardImpl.java	(date 1715695199652)
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 
 import static java.lang.String.format;
 
@@ -65,4 +66,17 @@
     public String toString() {
         return boardName;
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        BoardImpl board = (BoardImpl) o;
+        return boardName.equals(board.boardName);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(boardName, tasks, eventLogs);
+    }
 }
Index: src/com/practice/projectone/teammanagement/models/BugImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.exceptions.InvalidUserInputException;\r\nimport com.practice.projectone.teammanagement.models.contracts.Bug;\r\nimport com.practice.projectone.teammanagement.models.contracts.Person;\r\nimport com.practice.projectone.teammanagement.models.enums.Priority;\r\nimport com.practice.projectone.teammanagement.models.enums.Severity;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class BugImpl extends Content implements Bug {\r\n\r\n    private static final StatusType INITIAL_STATUS = StatusType.ACTIVE;\r\n    private final List<String> steps;\r\n    private Severity severity;\r\n\r\n    public BugImpl (int id, String title, String description, Priority priority, Severity severity, Person assignee){\r\n        super(id, title, description, INITIAL_STATUS, priority, assignee);\r\n        this.severity = severity;\r\n        this.steps = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public List<String> getSteps() {\r\n        return new ArrayList<>(steps);\r\n    }\r\n\r\n    @Override\r\n    public Severity getSeverity() {\r\n        return severity;\r\n    }\r\n\r\n    @Override\r\n    public void addStep(String step) {\r\n        steps.add(step);\r\n    }\r\n\r\n    @Override\r\n    public void changeSeverity(Severity severity) {\r\n        if (severity.equals(getSeverity())) {\r\n            throw new InvalidUserInputException(String.format(\"Can't change, severity already at %s\", severity));\r\n        }\r\n\r\n        this.severity = severity;\r\n        addEventToHistory(new EventLogImpl(String.format(\"Bug severity changed to %s\", severity)));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void changePriority(Priority priority) {\r\n        if (priority.equals(getPriority())) {\r\n            throw new InvalidUserInputException(String.format(\"Can't change, priority already at %s\", priority));\r\n        }\r\n\r\n        setPriority(priority);\r\n        addEventToHistory(new EventLogImpl(String.format(\"Task priority changed to %s\", priority)));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/BugImpl.java b/src/com/practice/projectone/teammanagement/models/BugImpl.java
--- a/src/com/practice/projectone/teammanagement/models/BugImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/BugImpl.java	(date 1715695199737)
@@ -2,24 +2,23 @@
 
 import com.practice.projectone.teammanagement.exceptions.InvalidUserInputException;
 import com.practice.projectone.teammanagement.models.contracts.Bug;
-import com.practice.projectone.teammanagement.models.contracts.Person;
 import com.practice.projectone.teammanagement.models.enums.Priority;
 import com.practice.projectone.teammanagement.models.enums.Severity;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
+import com.practice.projectone.teammanagement.models.enums.Status;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class BugImpl extends Content implements Bug {
 
-    private static final StatusType INITIAL_STATUS = StatusType.ACTIVE;
+    private static final Status INITIAL_STATUS = Status.ACTIVE;
     private final List<String> steps;
     private Severity severity;
 
-    public BugImpl (int id, String title, String description, Priority priority, Severity severity, Person assignee){
-        super(id, title, description, INITIAL_STATUS, priority, assignee);
+    public BugImpl (String title, String description, Priority priority, Severity severity, String assigneeName, List<String> steps){
+        super(title, description, INITIAL_STATUS, priority, assigneeName);
         this.severity = severity;
-        this.steps = new ArrayList<>();
+        this.steps = steps;
     }
 
     @Override
Index: src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.core.contracts;\r\n\r\nimport com.practice.projectone.teammanagement.models.contracts.Board;\r\nimport com.practice.projectone.teammanagement.models.contracts.Person;\r\nimport com.practice.projectone.teammanagement.models.contracts.Team;\r\n\r\nimport java.util.List;\r\n\r\npublic interface TeamRepository {\r\n    List<Person> getMembers();\r\n\r\n    List<Team> getTeams();\r\n\r\n    Person createPerson(String name);\r\n\r\n    Team createTeam(String teamName);\r\n\r\n    Board createBoard(String boardName);\r\n\r\n    void addPerson(Person person);\r\n\r\n    void addTeam(Team team);\r\n\r\n    void addMemberToTeam(Person person, Team team);\r\n\r\n    boolean teamExist(String teamName);\r\n\r\n    boolean personExist(String personName);\r\n\r\n    Team findTeamByName(String name);\r\n\r\n    Person findPersonByName(String name);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java b/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java
--- a/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java	(date 1715696285513)
@@ -1,6 +1,5 @@
 package com.practice.projectone.teammanagement.core.contracts;
 
-import com.practice.projectone.teammanagement.models.contracts.Board;
 import com.practice.projectone.teammanagement.models.contracts.Person;
 import com.practice.projectone.teammanagement.models.contracts.Team;
 
@@ -15,8 +14,6 @@
 
     Team createTeam(String teamName);
 
-    Board createBoard(String boardName);
-
     void addPerson(Person person);
 
     void addTeam(Team team);
@@ -30,4 +27,6 @@
     Team findTeamByName(String name);
 
     Person findPersonByName(String name);
+
+    void createBoard(String team, String boardName);
 }
Index: src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.core;\r\n\r\nimport com.practice.projectone.teammanagement.commands.contracts.Command;\r\nimport com.practice.projectone.teammanagement.core.contracts.CommandFactory;\r\nimport com.practice.projectone.teammanagement.core.contracts.TMSEngine;\r\nimport com.practice.projectone.teammanagement.core.contracts.TeamRepository;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class TMSEngineImpl implements TMSEngine {\r\n\r\n    private static final String TERMINATION_COMMAND = \"Exit\";\r\n    private static final String EMPTY_COMMAND_ERROR = \"Command cannot be empty.\";\r\n    private static final String MAIN_SPLIT_SYMBOL = \" \";\r\n    private static final String COMMENT_OPEN_SYMBOL = \"{{\";\r\n    private static final String COMMENT_CLOSE_SYMBOL = \"}}\";\r\n    private static final String REPORT_SEPARATOR = \"####################\";\r\n\r\n    private final CommandFactory commandFactory;\r\n    private final TeamRepository teamRepository;\r\n\r\n    public TMSEngineImpl() {\r\n        this.commandFactory = new CommandFactoryImpl();\r\n        this.teamRepository = new TeamRepositoryImpl();\r\n    }\r\n\r\n    public void start() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        while (true) {\r\n            try {\r\n                String inputLine = scanner.nextLine();\r\n                if (inputLine.isBlank()) {\r\n                    print(EMPTY_COMMAND_ERROR);\r\n                    continue;\r\n                }\r\n                if (inputLine.equalsIgnoreCase(TERMINATION_COMMAND)) {\r\n                    break;\r\n                }\r\n                processCommand(inputLine);\r\n            } catch (Exception ex) {\r\n                if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {\r\n                    print(ex.getMessage());\r\n                } else {\r\n                    print(ex.toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void processCommand(String inputLine) {\r\n        String commandName = extractCommandName(inputLine);\r\n        List<String> parameters = extractCommandParameters(inputLine);\r\n        Command command = commandFactory.createCommandFromCommandName(commandName, teamRepository);\r\n        String executionResult = command.execute(parameters);\r\n        print(executionResult);\r\n    }\r\n\r\n    /**\r\n     * Receives a full line and extracts the command to be executed from it.\r\n     * For example, if the input line is \"FilterBy Assignee John\", the method will return \"FilterBy\".\r\n     *\r\n     * @param inputLine A complete input line\r\n     * @return The name of the command to be executed\r\n     */\r\n    private String extractCommandName(String inputLine) {\r\n        return inputLine.split(\" \")[0];\r\n    }\r\n\r\n    /**\r\n     * Receives a full line and extracts the parameters that are needed for the command to execute.\r\n     * For example, if the input line is \"FilterBy Assignee John\",\r\n     * the method will return a list of [\"Assignee\", \"John\"].\r\n     *\r\n     * @param inputLine A complete input line\r\n     * @return A list of the parameters needed to execute the command\r\n     */\r\n    private List<String> extractCommandParameters(String inputLine) {\r\n        if (inputLine.contains(COMMENT_OPEN_SYMBOL)) {\r\n            return extractCommentParameters(inputLine);\r\n        }\r\n        String[] commandParts = inputLine.split(\" \");\r\n        List<String> parameters = new ArrayList<>();\r\n        for (int i = 1; i < commandParts.length; i++) {\r\n            parameters.add(commandParts[i]);\r\n        }\r\n        return parameters;\r\n    }\r\n\r\n    public List<String> extractCommentParameters(String fullCommand) {\r\n        int indexOfFirstSeparator = fullCommand.indexOf(MAIN_SPLIT_SYMBOL);\r\n        int indexOfOpenComment = fullCommand.indexOf(COMMENT_OPEN_SYMBOL);\r\n        int indexOfCloseComment = fullCommand.indexOf(COMMENT_CLOSE_SYMBOL);\r\n        List<String> parameters = new ArrayList<>();\r\n        if (indexOfOpenComment >= 0) {\r\n            parameters.add(fullCommand.substring(indexOfOpenComment + COMMENT_OPEN_SYMBOL.length(), indexOfCloseComment));\r\n            fullCommand = fullCommand.replaceAll(\"\\\\{\\\\{.+(?=}})}}\", \"\");\r\n        }\r\n\r\n        List<String> result = new ArrayList<>(Arrays.asList(fullCommand.substring(indexOfFirstSeparator + 1).split(MAIN_SPLIT_SYMBOL)));\r\n        result.removeAll(Arrays.asList(\" \", \"\", null));\r\n        parameters.addAll(result);\r\n        return parameters;\r\n    }\r\n\r\n    private void print(String result) {\r\n        System.out.println(result);\r\n        System.out.println(REPORT_SEPARATOR);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java b/src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java
--- a/src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java	(date 1715695199831)
@@ -15,8 +15,8 @@
     private static final String TERMINATION_COMMAND = "Exit";
     private static final String EMPTY_COMMAND_ERROR = "Command cannot be empty.";
     private static final String MAIN_SPLIT_SYMBOL = " ";
-    private static final String COMMENT_OPEN_SYMBOL = "{{";
-    private static final String COMMENT_CLOSE_SYMBOL = "}}";
+    private static final String COMMENT_OPEN_SYMBOL = "\"";
+    private static final String COMMENT_CLOSE_SYMBOL = "\"";
     private static final String REPORT_SEPARATOR = "####################";
 
     private final CommandFactory commandFactory;
@@ -92,11 +92,11 @@
     public List<String> extractCommentParameters(String fullCommand) {
         int indexOfFirstSeparator = fullCommand.indexOf(MAIN_SPLIT_SYMBOL);
         int indexOfOpenComment = fullCommand.indexOf(COMMENT_OPEN_SYMBOL);
-        int indexOfCloseComment = fullCommand.indexOf(COMMENT_CLOSE_SYMBOL);
+        int indexOfCloseComment = fullCommand.lastIndexOf(COMMENT_CLOSE_SYMBOL);
         List<String> parameters = new ArrayList<>();
         if (indexOfOpenComment >= 0) {
             parameters.add(fullCommand.substring(indexOfOpenComment + COMMENT_OPEN_SYMBOL.length(), indexOfCloseComment));
-            fullCommand = fullCommand.replaceAll("\\{\\{.+(?=}})}}", "");
+            fullCommand = fullCommand.replaceAll("\\\".+(?=\\\")\\\"", "");
         }
 
         List<String> result = new ArrayList<>(Arrays.asList(fullCommand.substring(indexOfFirstSeparator + 1).split(MAIN_SPLIT_SYMBOL)));
Index: src/com/practice/projectone/teammanagement/models/Content.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.models.contracts.Assignable;\r\nimport com.practice.projectone.teammanagement.models.contracts.Person;\r\nimport com.practice.projectone.teammanagement.models.contracts.Prioritizable;\r\nimport com.practice.projectone.teammanagement.models.enums.Priority;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\npublic abstract class Content extends TaskImpl implements Assignable, Prioritizable {\r\n\r\n    private Priority priority;\r\n    private Person assignee;\r\n\r\n    protected Content(long id, String title, String description, StatusType statusType, Priority priority, Person assignee) {\r\n        super(id, title, description, statusType);\r\n        this.priority = priority;\r\n        this.assignee = assignee;\r\n    }\r\n\r\n\r\n    @Override\r\n    public Person getAssignee() {\r\n        return assignee;\r\n    }\r\n\r\n    @Override\r\n    public Priority getPriority() {\r\n        return priority;\r\n    }\r\n\r\n    protected void setPriority(Priority priority){\r\n        this.priority = priority;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/Content.java b/src/com/practice/projectone/teammanagement/models/Content.java
--- a/src/com/practice/projectone/teammanagement/models/Content.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/Content.java	(date 1715695199843)
@@ -1,26 +1,25 @@
 package com.practice.projectone.teammanagement.models;
 
 import com.practice.projectone.teammanagement.models.contracts.Assignable;
-import com.practice.projectone.teammanagement.models.contracts.Person;
 import com.practice.projectone.teammanagement.models.contracts.Prioritizable;
 import com.practice.projectone.teammanagement.models.enums.Priority;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
+import com.practice.projectone.teammanagement.models.enums.Status;
 
 public abstract class Content extends TaskImpl implements Assignable, Prioritizable {
 
     private Priority priority;
-    private Person assignee;
+    private String assigneeName;
 
-    protected Content(long id, String title, String description, StatusType statusType, Priority priority, Person assignee) {
-        super(id, title, description, statusType);
+    protected Content(String title, String description, Status status, Priority priority, String assigneeName) {
+        super(title, description, status);
         this.priority = priority;
-        this.assignee = assignee;
+        this.assigneeName = assigneeName;
     }
 
 
     @Override
-    public Person getAssignee() {
-        return assignee;
+    public String getAssignee() {
+        return assigneeName;
     }
 
     @Override
Index: src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.core;\r\n\r\nimport com.practice.projectone.teammanagement.core.contracts.TeamRepository;\r\nimport com.practice.projectone.teammanagement.exceptions.ElementNotFoundException;\r\nimport com.practice.projectone.teammanagement.models.BoardImpl;\r\nimport com.practice.projectone.teammanagement.models.PersonImpl;\r\nimport com.practice.projectone.teammanagement.models.TeamImpl;\r\nimport com.practice.projectone.teammanagement.models.contracts.Board;\r\nimport com.practice.projectone.teammanagement.models.contracts.Nameable;\r\nimport com.practice.projectone.teammanagement.models.contracts.Person;\r\nimport com.practice.projectone.teammanagement.models.contracts.Team;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class TeamRepositoryImpl implements TeamRepository {\r\n    private final static String PERSON_ALREADY_EXIST = \"Person %s already exist. Choose a different name!\";\r\n    private final static String TEAM_ALREADY_EXIST = \"Team %s already exist. Choose a different name!\";\r\n    private final static String PERSON_ALREADY_MEMBER = \"%s is already a member of this team!\";\r\n    private final List<Team> teams;\r\n    private final List<Person> people;\r\n\r\n    public TeamRepositoryImpl() {\r\n        teams = new ArrayList<>();\r\n        people = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public List<Team> getTeams() {\r\n        return new ArrayList<>(teams);\r\n    }\r\n\r\n    @Override\r\n    public List<Person> getMembers() {\r\n        return new ArrayList<>(people);\r\n    }\r\n\r\n    @Override\r\n    public Person createPerson(String name) {\r\n        return new PersonImpl(name);\r\n    }\r\n\r\n    @Override\r\n    public Team createTeam(String teamName){\r\n        return new TeamImpl(teamName);\r\n    }\r\n\r\n    @Override\r\n    public Board createBoard(String boardName) {\r\n        return new BoardImpl(boardName);\r\n    }\r\n\r\n    @Override\r\n    public void addPerson(Person person) {\r\n        if (people.contains(person)) {\r\n            throw new IllegalArgumentException(String.format(PERSON_ALREADY_EXIST, person.getName()));\r\n        }\r\n        people.add(person);\r\n    }\r\n\r\n    @Override\r\n    public void addTeam(Team team){\r\n        if (teams.contains(team)){\r\n            throw new IllegalArgumentException(String.format(TEAM_ALREADY_EXIST, team.getName()));\r\n        }\r\n        teams.add(team);\r\n    }\r\n\r\n    @Override\r\n    public void addMemberToTeam(Person person, Team team){\r\n        if (team.getMembers().contains(person)){\r\n            throw new IllegalArgumentException(String.format(PERSON_ALREADY_MEMBER, person.getName()));\r\n        }\r\n        team.addMember(person);\r\n    }\r\n\r\n    @Override\r\n    public boolean teamExist(String teamName) {\r\n        return findElementByName(teamName, teams, \"team\") != null;\r\n    }\r\n\r\n    @Override\r\n    public boolean personExist(String personName) {\r\n        return findElementByName(personName, people, \"person\") != null;\r\n    }\r\n\r\n    @Override\r\n    public Team findTeamByName(String name) {\r\n        return findElementByName(name, teams, \"team\");\r\n    }\r\n\r\n    @Override\r\n    public Person findPersonByName(String name) {\r\n        return findElementByName(name, people, \"person\");\r\n    }\r\n\r\n\r\n    private <T extends Nameable> T findElementByName(String name, List<T> list, String lookingFor) {\r\n        T element = list.stream()\r\n                .filter(e -> e.getName().equals(name))\r\n                .findFirst()\r\n                .orElseThrow(() -> new ElementNotFoundException(String.format(\"No such %s found\", lookingFor)));\r\n        return element;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java b/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java
--- a/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java	(date 1715696676959)
@@ -19,10 +19,12 @@
     private final static String PERSON_ALREADY_MEMBER = "%s is already a member of this team!";
     private final List<Team> teams;
     private final List<Person> people;
+    private final List<Board> boards;
 
     public TeamRepositoryImpl() {
         teams = new ArrayList<>();
         people = new ArrayList<>();
+        boards = new ArrayList<>();
     }
 
     @Override
@@ -41,15 +43,10 @@
     }
 
     @Override
-    public Team createTeam(String teamName){
+    public Team createTeam(String teamName) {
         return new TeamImpl(teamName);
     }
 
-    @Override
-    public Board createBoard(String boardName) {
-        return new BoardImpl(boardName);
-    }
-
     @Override
     public void addPerson(Person person) {
         if (people.contains(person)) {
@@ -59,16 +56,16 @@
     }
 
     @Override
-    public void addTeam(Team team){
-        if (teams.contains(team)){
+    public void addTeam(Team team) {
+        if (teams.contains(team)) {
             throw new IllegalArgumentException(String.format(TEAM_ALREADY_EXIST, team.getName()));
         }
         teams.add(team);
     }
 
     @Override
-    public void addMemberToTeam(Person person, Team team){
-        if (team.getMembers().contains(person)){
+    public void addMemberToTeam(Person person, Team team) {
+        if (team.getMembers().contains(person)) {
             throw new IllegalArgumentException(String.format(PERSON_ALREADY_MEMBER, person.getName()));
         }
         team.addMember(person);
@@ -94,6 +91,15 @@
         return findElementByName(name, people, "person");
     }
 
+    @Override
+    public void createBoard(String teamName, String boardName) {
+        Team team = findTeamByName(teamName);
+        Board board = new BoardImpl(boardName);
+
+        team.createBoard(board);
+
+        boards.add(board);
+    }
 
     private <T extends Nameable> T findElementByName(String name, List<T> list, String lookingFor) {
         T element = list.stream()
Index: src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.commands;\r\n\r\nimport com.practice.projectone.teammanagement.core.contracts.TeamRepository;\r\nimport com.practice.projectone.teammanagement.exceptions.DuplicateEntityException;\r\nimport com.practice.projectone.teammanagement.models.contracts.Board;\r\nimport com.practice.projectone.teammanagement.models.contracts.Team;\r\nimport com.practice.projectone.teammanagement.utils.ValidationHelpers;\r\n\r\nimport java.util.List;\r\n\r\npublic class CreateNewBoardInTeam extends BaseCommand{\r\n\r\n    private static final int EXPECTED_PARAMETERS_COUNT = 2;\r\n    public static final String BOARD_ALREADY_EXISTS = \"Board already exists\";\r\n    public static final String BOARD_CREATED_SUCCESSFULLY = \"%s created successfully in %s\";\r\n\r\n    public CreateNewBoardInTeam(TeamRepository teamRepository) {\r\n        super(teamRepository);\r\n    }\r\n\r\n    @Override\r\n    public String execute(List<String> parameters) {\r\n        ValidationHelpers.validateArgumentsCount(parameters, EXPECTED_PARAMETERS_COUNT);\r\n\r\n        String boardName = parameters.get(0);\r\n        String teamName = parameters.get(1);\r\n\r\n        return createBoard(boardName,teamName);\r\n    }\r\n\r\n    private String createBoard(String boardName, String teamName) {\r\n        Team team = getTeamRepository().findTeamByName(teamName);\r\n        Board board = getTeamRepository().createBoard(boardName);\r\n\r\n        if (team.getBoards().contains(board)) {\r\n            throw new DuplicateEntityException(BOARD_ALREADY_EXISTS);\r\n        };\r\n\r\n        team.addBoard(board);\r\n\r\n        return String.format(BOARD_CREATED_SUCCESSFULLY, boardName, teamName);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java b/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java
--- a/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java	(date 1715696285175)
@@ -1,8 +1,6 @@
 package com.practice.projectone.teammanagement.commands;
 
 import com.practice.projectone.teammanagement.core.contracts.TeamRepository;
-import com.practice.projectone.teammanagement.exceptions.DuplicateEntityException;
-import com.practice.projectone.teammanagement.models.contracts.Board;
 import com.practice.projectone.teammanagement.models.contracts.Team;
 import com.practice.projectone.teammanagement.utils.ValidationHelpers;
 
@@ -11,7 +9,6 @@
 public class CreateNewBoardInTeam extends BaseCommand{
 
     private static final int EXPECTED_PARAMETERS_COUNT = 2;
-    public static final String BOARD_ALREADY_EXISTS = "Board already exists";
     public static final String BOARD_CREATED_SUCCESSFULLY = "%s created successfully in %s";
 
     public CreateNewBoardInTeam(TeamRepository teamRepository) {
@@ -29,14 +26,8 @@
     }
 
     private String createBoard(String boardName, String teamName) {
-        Team team = getTeamRepository().findTeamByName(teamName);
-        Board board = getTeamRepository().createBoard(boardName);
 
-        if (team.getBoards().contains(board)) {
-            throw new DuplicateEntityException(BOARD_ALREADY_EXISTS);
-        };
-
-        team.addBoard(board);
+        getTeamRepository().createBoard(teamName, boardName);
 
         return String.format(BOARD_CREATED_SUCCESSFULLY, boardName, teamName);
     }
Index: src/com/practice/projectone/teammanagement/models/FeedbackImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.models.contracts.Feedback;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\npublic class FeedbackImpl extends TaskImpl implements Feedback {\r\n\r\n    private int rating;\r\n\r\n    public FeedbackImpl (int id, String title, String description, StatusType status, int rating) {\r\n        super (id, title, description, status);\r\n        this.rating = rating;\r\n    }\r\n    @Override\r\n    public int getRating() {\r\n        return rating;\r\n    }\r\n\r\n    @Override\r\n    protected void revertStatus() {\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void advanceStatus() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/FeedbackImpl.java b/src/com/practice/projectone/teammanagement/models/FeedbackImpl.java
--- a/src/com/practice/projectone/teammanagement/models/FeedbackImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/FeedbackImpl.java	(date 1715695199712)
@@ -1,14 +1,14 @@
 package com.practice.projectone.teammanagement.models;
 
 import com.practice.projectone.teammanagement.models.contracts.Feedback;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
+import com.practice.projectone.teammanagement.models.enums.Status;
 
 public class FeedbackImpl extends TaskImpl implements Feedback {
 
     private int rating;
 
-    public FeedbackImpl (int id, String title, String description, StatusType status, int rating) {
-        super (id, title, description, status);
+    public FeedbackImpl (String title, String description, Status status, int rating) {
+        super (title, description, status);
         this.rating = rating;
     }
     @Override
Index: src/com/practice/projectone/teammanagement/models/StoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.exceptions.InvalidUserInputException;\r\nimport com.practice.projectone.teammanagement.models.contracts.Person;\r\nimport com.practice.projectone.teammanagement.models.contracts.Story;\r\nimport com.practice.projectone.teammanagement.models.enums.Priority;\r\nimport com.practice.projectone.teammanagement.models.enums.Size;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\npublic class StoryImpl extends Content implements Story {\r\n\r\n    private Size size;\r\n\r\n    public StoryImpl (int id, String title, String description, StatusType status, Priority priority, Size size, Person assignee) {\r\n        super (id, title, description, status, priority, assignee);\r\n        this.size = size;\r\n    }\r\n\r\n    @Override\r\n    public Size getSize() {\r\n        return size;\r\n    }\r\n\r\n    @Override\r\n    public void changeSize(Size size) {\r\n        if (size.equals(getSize())) {\r\n            throw new InvalidUserInputException(String.format(\"Can't change, size already at %s\", size));\r\n        }\r\n\r\n        this.size = size;\r\n        addEventToHistory(new EventLogImpl(String.format(\"Task size changed to %s\", size)));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void changePriority(Priority priority) {\r\n        if (priority.equals(getPriority())) {\r\n            throw new InvalidUserInputException(String.format(\"Can't change, priority already at %s\", priority));\r\n        }\r\n\r\n        setPriority(priority);\r\n        addEventToHistory(new EventLogImpl(String.format(\"Task priority changed to %s\", priority)));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/StoryImpl.java b/src/com/practice/projectone/teammanagement/models/StoryImpl.java
--- a/src/com/practice/projectone/teammanagement/models/StoryImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/StoryImpl.java	(date 1715695199724)
@@ -1,18 +1,17 @@
 package com.practice.projectone.teammanagement.models;
 
 import com.practice.projectone.teammanagement.exceptions.InvalidUserInputException;
-import com.practice.projectone.teammanagement.models.contracts.Person;
 import com.practice.projectone.teammanagement.models.contracts.Story;
 import com.practice.projectone.teammanagement.models.enums.Priority;
 import com.practice.projectone.teammanagement.models.enums.Size;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
+import com.practice.projectone.teammanagement.models.enums.Status;
 
 public class StoryImpl extends Content implements Story {
 
     private Size size;
 
-    public StoryImpl (int id, String title, String description, StatusType status, Priority priority, Size size, Person assignee) {
-        super (id, title, description, status, priority, assignee);
+    public StoryImpl (String title, String description, Status status, Priority priority, Size size, String assigneeName) {
+        super (title, description, status, priority, assigneeName);
         this.size = size;
     }
 
Index: src/com/practice/projectone/teammanagement/models/contracts/Story.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models.contracts;\r\n\r\nimport com.practice.projectone.teammanagement.models.enums.Size;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\npublic interface Story extends Task{\r\n    Size getSize();\r\n    void changeSize(Size size);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/contracts/Story.java b/src/com/practice/projectone/teammanagement/models/contracts/Story.java
--- a/src/com/practice/projectone/teammanagement/models/contracts/Story.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/contracts/Story.java	(date 1715695199976)
@@ -1,7 +1,6 @@
 package com.practice.projectone.teammanagement.models.contracts;
 
 import com.practice.projectone.teammanagement.models.enums.Size;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
 
 public interface Story extends Task{
     Size getSize();
Index: src/com/practice/projectone/teammanagement/commands/CreateBug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/commands/CreateBug.java b/src/com/practice/projectone/teammanagement/commands/CreateBug.java
new file mode 100644
--- /dev/null	(date 1715696991789)
+++ b/src/com/practice/projectone/teammanagement/commands/CreateBug.java	(date 1715696991789)
@@ -0,0 +1,38 @@
+package com.practice.projectone.teammanagement.commands;
+
+import com.practice.projectone.teammanagement.core.contracts.TeamRepository;
+import com.practice.projectone.teammanagement.models.enums.Priority;
+import com.practice.projectone.teammanagement.models.enums.Severity;
+import com.practice.projectone.teammanagement.utils.ParsingHelpers;
+import com.practice.projectone.teammanagement.utils.ValidationHelpers;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class CreateBug extends BaseCommand {
+    private static final int EXPECTED_PARAMETERS_COUNT = 6;
+
+    protected CreateBug(TeamRepository teamRepository) {
+        super(teamRepository);
+    }
+
+    @Override
+    public String execute(List<String> parameters) {
+        ValidationHelpers.validateArgumentsCount(parameters, EXPECTED_PARAMETERS_COUNT);
+
+        List<String> steps = Arrays.asList(parameters.get(0).split("; "));
+        String title = parameters.get(1);
+        String description = parameters.get(2);
+        Priority priority = ParsingHelpers.tryParseEnum(parameters.get(3), Priority.class);
+        Severity severity = ParsingHelpers.tryParseEnum(parameters.get(4), Severity.class);
+        String assigneeName = parameters.get(5);
+
+
+        return createBug(title, description, priority, severity, assigneeName, steps);
+    }
+
+    private String createBug(String title, String description, Priority priority, Severity severity, String assigneeName, List<String> steps) {
+
+        return null;
+    }
+}
Index: src/com/practice/projectone/teammanagement/models/contracts/Bug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models.contracts;\r\n\r\nimport com.practice.projectone.teammanagement.models.enums.Severity;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Bug extends Task{\r\n    List<String> getSteps();\r\n    void addStep(String step);\r\n\r\n    Severity getSeverity();\r\n    void changeSeverity(Severity severity);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/contracts/Bug.java b/src/com/practice/projectone/teammanagement/models/contracts/Bug.java
--- a/src/com/practice/projectone/teammanagement/models/contracts/Bug.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/contracts/Bug.java	(date 1715695200002)
@@ -1,7 +1,6 @@
 package com.practice.projectone.teammanagement.models.contracts;
 
 import com.practice.projectone.teammanagement.models.enums.Severity;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
 
 import java.util.List;
 
Index: src/com/practice/projectone/teammanagement/models/enums/StatusType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/enums/StatusType.java b/src/com/practice/projectone/teammanagement/models/enums/Status.java
rename from src/com/practice/projectone/teammanagement/models/enums/StatusType.java
rename to src/com/practice/projectone/teammanagement/models/enums/Status.java
--- a/src/com/practice/projectone/teammanagement/models/enums/StatusType.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/enums/Status.java	(date 1715695199782)
@@ -1,6 +1,6 @@
 package com.practice.projectone.teammanagement.models.enums;
 
-public enum StatusType {
+public enum Status {
 
     ACTIVE("Bug", "Active"),
     NOT_DONE("Story", "Not Done"),
@@ -13,7 +13,7 @@
     private final String taskType;
     private final String value;
 
-    StatusType(String taskType, String value) {
+    Status(String taskType, String value) {
         this.taskType = taskType;
         this.value = value;
     }
Index: src/com/practice/projectone/teammanagement/models/contracts/Task.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models.contracts;\r\n\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Task extends Identifiable, Commentable, ActivityAble, Nameable{\r\n    String getDescription();\r\n    StatusType getStatus();\r\n    void addComment(Comment comment);\r\n    void removeComment(Comment comment);\r\n    void changeStatus(StatusType statusType);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/contracts/Task.java b/src/com/practice/projectone/teammanagement/models/contracts/Task.java
--- a/src/com/practice/projectone/teammanagement/models/contracts/Task.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/contracts/Task.java	(date 1715695200051)
@@ -1,14 +1,12 @@
 package com.practice.projectone.teammanagement.models.contracts;
 
-import com.practice.projectone.teammanagement.models.enums.StatusType;
-
-import java.util.List;
+import com.practice.projectone.teammanagement.models.enums.Status;
 
 public interface Task extends Identifiable, Commentable, ActivityAble, Nameable{
     String getDescription();
-    StatusType getStatus();
+    Status getStatus();
     void addComment(Comment comment);
     void removeComment(Comment comment);
-    void changeStatus(StatusType statusType);
+    void changeStatus(Status status);
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"267e4434-ea34-4c4c-9368-85a562d5c2bf\" name=\"Changes\" comment=\"add project packages\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/exceptions/DuplicateEntityException.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/AddBoardToTeam.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/enums/CommandType.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/enums/CommandType.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/CommandFactoryImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/CommandFactoryImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/TeamImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/TeamImpl.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"Interface\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2gP8yEDtRxiuqyRNmJDLxsHHzGf\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/IT STUFF/TelerikProjects/TeamManagementSystemProject/src/com/practice/projectone/teammanagement&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"com.practice.projectone.teammanagement.commands.contracts\" />\r\n      <recent name=\"com.practice.projectone.teammanagement.core\" />\r\n      <recent name=\"com.practice.projectone.teammanagement.models\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\IT STUFF\\TelerikProjects\\TeamManagementSystemProject\\src\\com\\practice\\projectone\\teammanagement\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.practice.projectone.teammanagement.exceptions\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"267e4434-ea34-4c4c-9368-85a562d5c2bf\" name=\"Changes\" comment=\"\" />\r\n      <created>1715588107845</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1715588107845</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"add project packages\">\r\n      <created>1715599328293</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715599328293</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT\" value=\"false\" />\r\n    <option name=\"CHECK_NEW_TODO\" value=\"false\" />\r\n    <MESSAGE value=\"add project packages\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add project packages\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/.idea/workspace.xml	(date 1715695200061)
@@ -2,14 +2,26 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="267e4434-ea34-4c4c-9368-85a562d5c2bf" name="Changes" comment="add project packages">
-      <change afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/exceptions/DuplicateEntityException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/CreateBug.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/AddBoardToTeam.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/enums/CommandType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/enums/CommandType.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/CommandFactoryImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/CommandFactoryImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/commands/CreateNewBoardInTeam.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/TMSEngineImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/TeamRepositoryImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/core/contracts/TeamRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/BoardImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/BoardImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/BugImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/BugImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/Content.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/Content.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/FeedbackImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/FeedbackImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/StoryImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/StoryImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/TaskImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/TaskImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/TeamImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/TeamImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Assignable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Assignable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Bug.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Bug.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Story.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Story.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Task.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Task.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Team.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/contracts/Team.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/enums/StatusType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/practice/projectone/teammanagement/models/enums/Status.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -20,14 +32,13 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="Enum" />
-        <option value="Class" />
         <option value="Interface" />
+        <option value="Class" />
       </list>
     </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
Index: src/com/practice/projectone/teammanagement/models/TaskImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models;\r\n\r\nimport com.practice.projectone.teammanagement.exceptions.InvalidUserInputException;\r\nimport com.practice.projectone.teammanagement.models.contracts.Comment;\r\nimport com.practice.projectone.teammanagement.models.contracts.EventLog;\r\nimport com.practice.projectone.teammanagement.models.contracts.Task;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\nimport com.practice.projectone.teammanagement.utils.ValidationHelpers;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static java.lang.String.format;\r\n\r\npublic abstract class TaskImpl implements Task {\r\n\r\n    public static final int TITLE_LEN_MIN = 10;\r\n    public static final int TITLE_LEN_MAX = 100;\r\n    private static final String TITLE_LEN_ERR = format(\r\n            \"Title must be between %s and %s characters long!\",\r\n            TITLE_LEN_MIN,\r\n            TITLE_LEN_MAX);\r\n    public static final int DESCRIPTION_LEN_MIN = 10;\r\n    public static final int DESCRIPTION_LEN_MAX = 500;\r\n    private static final String DESCRIPTION_LEN_ERR = format(\r\n            \"Description must be between %s and %s characters long!\",\r\n            DESCRIPTION_LEN_MIN,\r\n            DESCRIPTION_LEN_MAX);\r\n\r\n    private final long id;\r\n    private String title;\r\n    private String description;\r\n    private StatusType statusType;\r\n    private final List<Comment> comments;\r\n    private final List<EventLog> activityHistory;\r\n\r\n    protected TaskImpl(long id, String title, String description, StatusType statusType) {\r\n        this.id = id;\r\n        setTitle(title);\r\n        setDescription(description);\r\n        setStatusType(statusType);\r\n        comments = new ArrayList<>();\r\n        activityHistory = new ArrayList<>();\r\n\r\n        addEventToHistory(new EventLogImpl(String.format(\"Task created %s\",this)));\r\n    }\r\n\r\n    @Override\r\n    public long getId() {\r\n        return id;\r\n    }\r\n\r\n    private void setTitle(String title) {\r\n        ValidationHelpers.validateStringLength(title, TITLE_LEN_MIN, TITLE_LEN_MAX, TITLE_LEN_ERR);\r\n        this.title = title;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return title;\r\n    }\r\n\r\n    private void setDescription(String description) {\r\n        ValidationHelpers.validateStringLength(description, DESCRIPTION_LEN_MIN, DESCRIPTION_LEN_MAX, DESCRIPTION_LEN_ERR);\r\n        this.description = description;\r\n    }\r\n\r\n    @Override\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n\r\n    @Override\r\n    public StatusType getStatus() {\r\n        return statusType;\r\n    }\r\n\r\n    protected void setStatusType(StatusType statusType){\r\n        this.statusType = statusType;\r\n    }\r\n\r\n    @Override\r\n    public List<Comment> getComments() {\r\n        return new ArrayList<>(comments);\r\n    }\r\n\r\n    @Override\r\n    public List<EventLog> getActivityHistory() {\r\n        return new ArrayList<>(activityHistory);\r\n    }\r\n\r\n    @Override\r\n    public void addComment(Comment comment) {\r\n        comments.add(comment);\r\n    }\r\n\r\n    @Override\r\n    public void removeComment(Comment comment) {\r\n        comments.remove(comment);\r\n    }\r\n\r\n    @Override\r\n    public void changeStatus(StatusType statusType) {\r\n        if (statusType.equals(getStatus())) {\r\n            throw new InvalidUserInputException(String.format(\"Can't change, task status already at %s\", statusType));\r\n        }\r\n\r\n        setStatusType(statusType);\r\n        addEventToHistory(new EventLogImpl(String.format(\"Task status changed to %s\", statusType)));\r\n    }\r\n\r\n    protected void addEventToHistory(EventLog eventLog) {\r\n        activityHistory.add(eventLog);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"\"\"\r\n                ID%d\r\n                Title: \"%s\"\r\n                Status:%s\"\"\".formatted(getId(), title, statusType);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/TaskImpl.java b/src/com/practice/projectone/teammanagement/models/TaskImpl.java
--- a/src/com/practice/projectone/teammanagement/models/TaskImpl.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/TaskImpl.java	(date 1715695199818)
@@ -4,7 +4,7 @@
 import com.practice.projectone.teammanagement.models.contracts.Comment;
 import com.practice.projectone.teammanagement.models.contracts.EventLog;
 import com.practice.projectone.teammanagement.models.contracts.Task;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
+import com.practice.projectone.teammanagement.models.enums.Status;
 import com.practice.projectone.teammanagement.utils.ValidationHelpers;
 
 import java.util.ArrayList;
@@ -27,22 +27,24 @@
             DESCRIPTION_LEN_MIN,
             DESCRIPTION_LEN_MAX);
 
+    private static long idCounter = 0;
+
     private final long id;
     private String title;
     private String description;
-    private StatusType statusType;
+    private Status status;
     private final List<Comment> comments;
     private final List<EventLog> activityHistory;
 
-    protected TaskImpl(long id, String title, String description, StatusType statusType) {
-        this.id = id;
+    protected TaskImpl(String title, String description, Status status) {
+        this.id = ++idCounter;
         setTitle(title);
         setDescription(description);
-        setStatusType(statusType);
+        setStatusType(status);
         comments = new ArrayList<>();
         activityHistory = new ArrayList<>();
 
-        addEventToHistory(new EventLogImpl(String.format("Task created %s",this)));
+        addEventToHistory(new EventLogImpl(String.format("Task created %s", this)));
     }
 
     @Override
@@ -72,12 +74,12 @@
 
 
     @Override
-    public StatusType getStatus() {
-        return statusType;
+    public Status getStatus() {
+        return status;
     }
 
-    protected void setStatusType(StatusType statusType){
-        this.statusType = statusType;
+    protected void setStatusType(Status status) {
+        this.status = status;
     }
 
     @Override
@@ -101,13 +103,13 @@
     }
 
     @Override
-    public void changeStatus(StatusType statusType) {
-        if (statusType.equals(getStatus())) {
-            throw new InvalidUserInputException(String.format("Can't change, task status already at %s", statusType));
+    public void changeStatus(Status status) {
+        if (status.equals(getStatus())) {
+            throw new InvalidUserInputException(String.format("Can't change, task status already at %s", status));
         }
 
-        setStatusType(statusType);
-        addEventToHistory(new EventLogImpl(String.format("Task status changed to %s", statusType)));
+        setStatusType(status);
+        addEventToHistory(new EventLogImpl(String.format("Task status changed to %s", status)));
     }
 
     protected void addEventToHistory(EventLog eventLog) {
@@ -119,6 +121,6 @@
         return """
                 ID%d
                 Title: "%s"
-                Status:%s""".formatted(getId(), title, statusType);
+                Status:%s""".formatted(getId(), title, status);
     }
 }
Index: src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models.contracts;\r\n\r\nimport com.practice.projectone.teammanagement.models.enums.Priority;\r\nimport com.practice.projectone.teammanagement.models.enums.StatusType;\r\n\r\npublic interface Prioritizable {\r\n    Priority getPriority();\r\n    void changePriority(Priority priority);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java b/src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java
--- a/src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/contracts/Prioritizable.java	(date 1715695200109)
@@ -1,7 +1,6 @@
 package com.practice.projectone.teammanagement.models.contracts;
 
 import com.practice.projectone.teammanagement.models.enums.Priority;
-import com.practice.projectone.teammanagement.models.enums.StatusType;
 
 public interface Prioritizable {
     Priority getPriority();
Index: src/com/practice/projectone/teammanagement/models/contracts/Assignable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.practice.projectone.teammanagement.models.contracts;\r\n\r\npublic interface Assignable {\r\n    Person getAssignee();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/practice/projectone/teammanagement/models/contracts/Assignable.java b/src/com/practice/projectone/teammanagement/models/contracts/Assignable.java
--- a/src/com/practice/projectone/teammanagement/models/contracts/Assignable.java	(revision 710d2dea75796d2e4b48e628c50649bba3725ab3)
+++ b/src/com/practice/projectone/teammanagement/models/contracts/Assignable.java	(date 1715695200133)
@@ -1,5 +1,5 @@
 package com.practice.projectone.teammanagement.models.contracts;
 
 public interface Assignable {
-    Person getAssignee();
+    String getAssignee();
 }
